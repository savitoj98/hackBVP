<html>

<head>
    <title>{{title}}</title>
    <link href='https://api.mapbox.com/mapbox-gl-js/v0.49.0/mapbox-gl.css' rel='stylesheet' />
    <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.49.0/mapbox-gl.js'></script>
    <meta charset='utf-8' />
    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
    <!--Import Google Icon Font-->
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <!--Import materialize.css-->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">

    <style>
        body {
            margin: 0;
            padding: 0;
        }

        #map {
            z-index: 10;
            position: absolute;
            top: 16%;
            bottom: 0;
            width: 100%;
        }

        .sidenav-trigger {
            position: absolute;
            top: 20px;
            right: 30px;
            color: white;

        }

        .select-dropdown {
            color: white;
            border-bottom-color: white;
        }

        .caret {
            fill: white;
        }

        .send:hover {
            cursor: pointer;
        }
    </style>


</head>

<body>
    <nav style="height: 100px; line-height:100px">
        <!-- navbar content here  -->
        <div class="nav-wrapper">
            <a href="#" class="brand-logo">
                <img src="/images/logo.png" style="width:150px;">
            </a>
            <div class="input-field col s12 m6" style="position:absolute;top: 40px;left: 28%;width: 50%;">
                <select multiple>
                    <option value="" disabled>Choose your option</option>
                    <option value="4">Food</option>
                    <option value="1">Water</option>
                    <option value="3">Medicine</option>
                    <option value="2">Sanitation</option>
                    <option value="0">Others</option>
                </select>
                <i class="material-icons send" style="color: white; position:  absolute;top: -6px;right: -39px;">send</i>
            </div>
        </div>
    </nav>

    <ul id="slide-out" class="sidenav">
        <li>
            <a href="#!">My Profile</a>
        </li>
        <li>
            <a href="/fund_chain">Donate</a>
        </li>
        <li>
            <a href="/auction">Auction</a>
        </li>
        <li>
            <div class="divider"></div>
        </li>
        <!-- <li><a class="subheader"></a></li> -->
        <li>
            <a class="waves-effect" href="#!">Sign Out</a>
        </li>
    </ul>
    <a href="#" data-target="slide-out" class="sidenav-trigger">
        <i class="material-icons">menu</i>
    </a>
    <div class="fixed-action-btn">

        <div id="chat-div" class="z-depth-5" style="margin: 5%;position: fixed;left: 0;bottom: 0;">

        <iframe
                allow="microphone;"
                width="350"
                height="430">
        </iframe>

    </div>

        <a class=" btn-large green" id="chat-button">
            <i class="large material-icons">message</i>
        </a>

        <a class="btn-floating btn-large red">
            <i class="large material-icons">swap_horiz</i>
        </a>
    </div>

    


    <div id='map'></div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.3.1.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
        crossorigin="anonymous"></script>
    <script type="text/javascript">
        document.addEventListener('DOMContentLoaded', function () {
            var elems = document.querySelectorAll('.sidenav');
            var instances = M.Sidenav.init(elems, { edge: 'right' });
        });
        document.addEventListener('DOMContentLoaded', function () {
            var elems = document.querySelectorAll('select');
            var instances = M.FormSelect.init(elems);
        });
    </script>
    <script>
        var map1Toggle = true;
        $('.btn-floating').on('click', function (e) {
            if (map1Toggle) {
                map2();
                map1Toggle = false;
            } else {
                console.log("A")
                map1();
                map1Toggle = true;
            }

        })

        $('#chat-div').hide();

        $('#chat-button').on('click',function(){
            $('#chat-div').toggle();
        })

        $('.send').on('click', function (e) {
            var elem = document.querySelector('select');
            var instance = M.FormSelect.getInstance(elem);
            var values = instance.getSelectedValues();
            if (values.length <= 0) {
                alert("select atleast one problem");
            }
            else {
                var prob = Array.from(Array(5), () => 0)
                for (var i = 0; i < values.length; i++) {
                    prob[Number(values[i])] = 1;
                }
                console.log(prob);
                var lat;
                var long;
                navigator.geolocation.getCurrentPosition(function (position) {
                    lat = position.coords.latitude;
                    long = position.coords.longitude;
                    $.ajax({
                        url: 'http://localhost:3000/map/addProblem',
                        method: 'POST',
                        data: {
                            lat: lat,
                            long: long,
                            problems: prob
                        },
                        success: function (data) {
                            alert("Thank You For Sharing Your Grievances.")
                        }
                    })
                });
            }
        })

        function map2() {

            var foodsJson = decodeURIComponent("{{{foods}}}");
            var watersJson = decodeURIComponent("{{{waters}}}");
            var othersJson = decodeURIComponent("{{{others}}}");
            var satsJson = decodeURIComponent("{{{sats}}}");
            var medsJson = decodeURIComponent("{{{meds}}}");

            var foodsObj = JSON.parse(foodsJson);
            var watersObj = JSON.parse(watersJson);
            var othersObj = JSON.parse(othersJson);
            var satsObj = JSON.parse(satsJson);
            var medsObj = JSON.parse(medsJson);


            mapboxgl.accessToken = 'pk.eyJ1IjoiZmVyaWRhdGkiLCJhIjoiY2ptbG14MTM3MDk3cDNrcGJuaHpxZTZkaCJ9.lpmarhUWUsyIxyxm6Q9C1g';
            var map = new mapboxgl.Map({
                container: 'map', // container id
                style: 'mapbox://styles/mapbox/streets-v9', // stylesheet location
                center: [77.3839, 27.0616], // starting position [lng, lat]
                zoom: 6// starting zoom
            });
            map.addControl(new mapboxgl.GeolocateControl({
                positionOptions: {
                    enableHighAccuracy: false
                },
                trackUserLocation: true
            }))

            map.on('load', function () {

                const allPointsFood = foodsObj.map(point => ({
                    type: 'Feature',
                    geometry: {
                        type: 'Point',
                        coordinates: point
                    }
                }));
                const allPointsWater = watersObj.map(point => ({
                    type: 'Feature',
                    geometry: {
                        type: 'Point',
                        coordinates: point
                    }
                }));
                const allPointsOther = othersObj.map(point => ({
                    type: 'Feature',
                    geometry: {
                        type: 'Point',
                        coordinates: point
                    }
                }));
                const allPointsSat = satsObj.map(point => ({
                    type: 'Feature',
                    geometry: {
                        type: 'Point',
                        coordinates: point
                    }
                }));
                const allPointsMed = medsObj.map(point => ({
                    type: 'Feature',
                    geometry: {
                        type: 'Point',
                        coordinates: point
                    }
                }));

                map.addLayer({
                    id: 'food',
                    type: 'circle',
                    source: {
                        type: 'geojson',
                        data: {
                            type: 'FeatureCollection',
                            features: allPointsFood
                        }
                    },
                    paint: {
                        'circle-radius': {
                            'base': 1.75,
                            'stops': [[12, 2], [22, 180]]
                        },
                        'circle-color': '#fbb03b'

                    }
                });
                map.addLayer({
                    id: 'med',
                    type: 'circle',
                    source: {
                        type: 'geojson',
                        data: {
                            type: 'FeatureCollection',
                            features: allPointsMed
                        }
                    },
                    paint: {
                        'circle-radius': {
                            'base': 1.75,
                            'stops': [[12, 2], [22, 180]]
                        },
                        'circle-color': '#223b53'

                    }
                });
                map.addLayer({
                    id: 'sat',
                    type: 'circle',
                    source: {
                        type: 'geojson',
                        data: {
                            type: 'FeatureCollection',
                            features: allPointsSat
                        }
                    },
                    paint: {
                        'circle-radius': {
                            'base': 1.75,
                            'stops': [[12, 2], [22, 180]]
                        },
                        'circle-color': '#e55e5e'

                    }
                });
                map.addLayer({
                    id: 'water22',
                    type: 'circle',
                    source: {
                        type: 'geojson',
                        data: {
                            type: 'FeatureCollection',
                            features: allPointsWater
                        }
                    },
                    paint: {
                        'circle-radius': {
                            'base': 1.75,
                            'stops': [[12, 2], [22, 180]]
                        },
                        'circle-color': '#3bb2d0'

                    }
                });
                map.addLayer({
                    id: 'other',
                    type: 'circle',
                    source: {
                        type: 'geojson',
                        data: {
                            type: 'FeatureCollection',
                            features: allPointsOther
                        }
                    },
                    paint: {
                        'circle-radius': {
                            'base': 1.75,
                            'stops': [[12, 2], [22, 180]]
                        },
                        'circle-color': '#ccc'

                    }
                });



            });

        }

        //Just for some time

        function map1() {
            var decodedJson = decodeURIComponent("{{{encoded}}}");
            //var jsonObj = JSON.parse(decodedJson);
            //console.log(decodedJson);  

            mapboxgl.accessToken = 'pk.eyJ1IjoiZmVyaWRhdGkiLCJhIjoiY2ptbG14MTM3MDk3cDNrcGJuaHpxZTZkaCJ9.lpmarhUWUsyIxyxm6Q9C1g';
            var map = new mapboxgl.Map({
                container: 'map', // container id
                style: 'mapbox://styles/mapbox/streets-v9', // stylesheet location
                center: [77.3839, 27.0616], // starting position [lng, lat]
                zoom: 5// starting zoom
            });
            map.addControl(new mapboxgl.GeolocateControl({
                positionOptions: {
                    enableHighAccuracy: false
                },
                trackUserLocation: true
            }))

            var popup = new mapboxgl.Popup({
                closeButton: false,
                closeOnClick: false
            });

            map.on('load', function () {

                //var point_features = [];
                var url = 'http://localhost:3000/map/geojson';
                window.setInterval(function () {
                    //console.log("new d");
                    map.getSource("earthquakes").setData(url);
                }, 5000);


                // Add a new source from our GeoJSON data and set the
                // 'cluster' option to true. GL-JS will add the point_count property to your source data.
                map.addSource("earthquakes", {
                    type: "geojson",
                    // Point to GeoJSON data. This example visualizes all M1.0+ earthquakes
                    // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.
                    data: url,
                    cluster: true,
                    clusterMaxZoom: 14, // Max zoom to cluster points on
                    clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)

                });

                map.addLayer({
                    id: "clusters",
                    type: "circle",
                    source: "earthquakes",
                    filter: ["has", "point_count"],
                    paint: {
                        // Use step expressions (https://www.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)
                        // with three steps to implement three types of circles:
                        //   * Blue, 20px circles when point count is less than 100
                        //   * Yellow, 30px circles when point count is between 100 and 750
                        //   * Pink, 40px circles when point count is greater than or equal to 750
                        "circle-color": [
                            "step",
                            ["get", "point_count"],
                            "#51bbd6",
                            100,
                            "#f1f075",
                            750,
                            "#f28cb1"
                        ],
                        "circle-radius": [
                            "step",
                            ["get", "point_count"],
                            20,
                            100,
                            30,
                            750,
                            40
                        ]
                    }
                });

                map.addLayer({
                    id: "cluster-count",
                    type: "symbol",
                    source: "earthquakes",
                    filter: ["has", "point_count"],
                    layout: {
                        "text-field": "{point_count}",
                        "text-font": ["DIN Offc Pro Medium", "Arial Unicode MS Bold"],
                        "text-size": 12
                    }
                });

                map.addLayer({
                    id: "unclustered-point",
                    type: "circle",
                    source: "earthquakes",
                    filter: ["!", ["has", "point_count"]],
                    paint: {
                        "circle-color": "#11b4da",
                        "circle-radius": 4,
                        "circle-stroke-width": 1,
                        "circle-stroke-color": "#fff"
                    }
                });

                // inspect a cluster on click
                map.on('click', 'clusters', function (e) {
                    console.log(e);
                    var feature_points;

                    var features = map.queryRenderedFeatures(e.point, { layers: ['clusters'] });
                    var clusterId = features[0].properties.cluster_id;
                    var point_count = features[0].properties.point_count;


                    map.getSource('earthquakes').getClusterLeaves(clusterId, point_count, 0, function (err, aFeatures) {
                        console.log('getClusterLeaves', aFeatures);
                        feature_points = aFeatures;

                        //console.log(features);
                        map.getSource('earthquakes').getClusterExpansionZoom(clusterId, function (err, zoom) {
                            if (err)
                                return;

                            map.easeTo({
                                center: features[0].geometry.coordinates,
                                zoom: zoom
                            });
                        });


                    });
                });



                map.on('mouseenter', 'clusters', function (e) {
                    map.getCanvas().style.cursor = 'pointer';
                    var feature_points;

                    var features = map.queryRenderedFeatures(e.point, { layers: ['clusters'] });
                    var clusterId = features[0].properties.cluster_id;
                    var point_count = features[0].properties.point_count;


                    map.getSource('earthquakes').getClusterLeaves(clusterId, point_count, 0, function (err, aFeatures) {
                        //console.log('getClusterLeaves', aFeatures);
                        feature_points = aFeatures;


                        var probsum = [];
                        probsum = [0, 0, 0, 0, 0];
                        var max = 0;
                        var maxi = 0;
                        for (var i = 0; i < feature_points.length; i++) {
                            for (var j = 0; j < 5; j++) {
                                probsum[j] += feature_points[i].properties.problems[j];
                                if (max < probsum[j]) {
                                    max = probsum[j];
                                    maxi = j;
                                }

                            }

                        }

                        var probs = ["Others", "Water", "Sanitation", "Medicine", "Food"];


                        var coordinates = e.features[0].geometry.coordinates.slice();
                        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
                        }
                        var description = "<b>Cluster Details:</b><p>Major Problem: " + probs[maxi] + " </p>";
                        popup.setLngLat(coordinates)
                            .setHTML(description)
                            .addTo(map);
                    });
                });


                map.on('mouseleave', 'clusters', function () {
                    map.getCanvas().style.cursor = '';
                    popup.remove();
                });

                map.on('mouseenter', function () {
                    map.getCanvas().style.cursor = 'pointer';
                });
                map.on('mouseleave', function () {
                    map.getCanvas().style.cursor = '';
                });
            });
        }
        map1();
    </script>

</body>

</html>
